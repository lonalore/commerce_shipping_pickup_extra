<?php

/**
 * @file
 * Contains
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\File\FileSystemInterface;
use PhpOffice\PhpSpreadsheet\IOFactory;

/**
 * Implements hook_commerce_checkout_pane_info_alter();
 */
function commerce_shipping_pickup_extra_commerce_checkout_pane_info_alter(array &$panes) {
  if (isset($panes['pickup_capable_shipping_information'])) {
    $panes['pickup_capable_shipping_information']['class'] = 'Drupal\commerce_shipping_pickup_extra\Plugin\Commerce\CheckoutPane\AlteredPickupCapableShippingInformation';
  }
}

/**
 * Implements hook_commerce_inline_form_info_alter();
 */
function commerce_shipping_pickup_extra_commerce_inline_form_info_alter(array &$forms) {
  if (isset($forms['pickup_profile'])) {
    $forms['pickup_profile']['class'] = 'Drupal\commerce_shipping_pickup_extra\Plugin\Commerce\InlineForm\AlteredPickupProfile';
  }
}

/**
 * Implements hook_cron().
 */
function commerce_shipping_pickup_extra_cron() {
  // We access our configuration.
  $cron_config = \Drupal::config('commerce_shipping_pickup_extra.settings');

  // Default to an hourly interval. Of course, cron has to be running at least
  // hourly for this to work.
  $interval = $cron_config->get('interval');
  $interval = !empty($interval) ? $interval : 86400;

  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in the site state.
  $next_execution = \Drupal::state()
    ->get('commerce_shipping_pickup_extra.next_execution', 0);

  if (\Drupal::time()->getRequestTime() >= $next_execution) {
    // This is a silly example of a cron job.
    // It just makes it obvious that the job has run without
    // making any changes to your database.
    \Drupal::logger('commerce_shipping_pickup_extra')
      ->notice('commerce_shipping_pickup_extra ran');

    //    _commerce_shipping_pickup_extra_update_foxpost();
    //    _commerce_shipping_pickup_extra_update_mpl_post_office();
    //    _commerce_shipping_pickup_extra_update_mpl_pickup_point();

    \Drupal::state()
      ->set('commerce_shipping_pickup_extra.next_execution', \Drupal::time()
          ->getRequestTime() + $interval);
  }
}

function _commerce_shipping_pickup_extra_update_foxpost() {
  $url = 'https://www1.foxpost.hu/foxpost_terminals.json';

  $storage = \Drupal::entityTypeManager()->getStorage('pickup_item');
  $client = \Drupal::httpClient();
  $response = $client->request('GET', $url);
  $content = $response->getBody();

  $items = Json::decode($content);

  if (!empty($items)) {
    /** @var \Drupal\commerce_shipping_pickup_extra\Entity\PickupItemInterface[] $entities */
    $entities = $storage->loadByProperties([
      'method' => 'pickup_foxpost',
    ]);

    foreach ($entities as $entity) {
      $entity->delete();
    }

    foreach ($items as $item) {
      $parts = explode(' ', $item['address'], 3);

      $entity = $storage->create();
      $entity->setName($item['name']);
      $entity->set('method', 'pickup_foxpost');
      $entity->set('address', [
        [
          'country_code'  => 'HU',
          'organization'  => $item['name'],
          'address_line1' => $parts[2],
          'locality'      => $parts[1],
          'postal_code'   => $parts[0],
        ],
      ]);
      $entity->save();
    }
  }
}

function _commerce_shipping_pickup_extra_update_mpl_post_office() {
  $storage = \Drupal::entityTypeManager()->getStorage('pickup_item');

  $items = _commerce_shipping_pickup_extra_xml_to_array('PM');

  if (!empty($items)) {
    /** @var \Drupal\commerce_shipping_pickup_extra\Entity\PickupItemInterface[] $entities */
    $entities = $storage->loadByProperties([
      'method' => 'pickup_mpl_post_office',
    ]);

    foreach ($entities as $entity) {
      $entity->delete();
    }

    foreach ($items as $item) {
      $name = $item['name'] . ' (' . $item['zipcode'] . ' ' . $item['locality'] . ', ' . $item['address'] . ')';

      $entity = $storage->create();
      $entity->setName($name);
      $entity->set('method', 'pickup_mpl_post_office');
      $entity->set('address', [
        [
          'country_code'  => 'HU',
          'organization'  => $item['name'],
          'address_line1' => $item['address'],
          'locality'      => $item['locality'],
          'postal_code'   => $item['zipcode'],
        ],
      ]);
      $entity->save();
    }
  }
}

function _commerce_shipping_pickup_extra_update_mpl_post_point() {
  $storage = \Drupal::entityTypeManager()->getStorage('pickup_item');

  $items = _commerce_shipping_pickup_extra_xml_to_array('PP');

  if (!empty($items)) {
    /** @var \Drupal\commerce_shipping_pickup_extra\Entity\PickupItemInterface[] $entities */
    $entities = $storage->loadByProperties([
      'method' => 'pickup_mpl_postpoint',
    ]);

    foreach ($entities as $entity) {
      $entity->delete();
    }

    foreach ($items as $item) {
      $name = $item['name'] . ' (' . $item['zipcode'] . ' ' . $item['locality'] . ', ' . $item['address'] . ')';

      $entity = $storage->create();
      $entity->setName($name);
      $entity->set('method', 'pickup_mpl_postpoint');
      $entity->set('address', [
        [
          'country_code'  => 'HU',
          'organization'  => $item['name'],
          'address_line1' => $item['address'],
          'locality'      => $item['locality'],
          'postal_code'   => $item['zipcode'],
        ],
      ]);
      $entity->save();
    }
  }
}

function _commerce_shipping_pickup_extra_update_mpl_pickup_point() {
  $storage = \Drupal::entityTypeManager()->getStorage('pickup_item');

  $items = _commerce_shipping_pickup_extra_xml_to_array('CS');

  if (!empty($items)) {
    /** @var \Drupal\commerce_shipping_pickup_extra\Entity\PickupItemInterface[] $entities */
    $entities = $storage->loadByProperties([
      'method' => 'pickup_mpl_parcel_machine',
    ]);

    foreach ($entities as $entity) {
      $entity->delete();
    }

    foreach ($items as $item) {
      $name = $item['name'] . ' (' . $item['zipcode'] . ' ' . $item['locality'] . ', ' . $item['address'] . ')';

      $entity = $storage->create();
      $entity->setName($name);
      $entity->set('method', 'pickup_mpl_parcel_machine');
      $entity->set('address', [
        [
          'country_code'  => 'HU',
          'organization'  => $item['name'],
          'address_line1' => $item['address'],
          'locality'      => $item['locality'],
          'postal_code'   => $item['zipcode'],
        ],
      ]);
      $entity->save();
    }
  }
}

/**
 * @param string $type
 *   PM = posta;
 *   PP = posta pont (MOL, Coop);
 *   CS = csomagautomata
 *
 * @return array
 */
function _commerce_shipping_pickup_extra_xml_to_array($type = 'PM') {
  // @see https://www.posta.hu/partnerextra_leiras
  $url = 'http://httpmegosztas.posta.hu/PartnerExtra/Out/PostInfo2.xml';

  $data = file_get_contents($url);
  $data = simplexml_load_string($data);

  if (empty($data)) {
    return [];
  }

  $items = [];

  foreach ($data as $item) {
    if ($item->ServicePointType == $type) {
      $attributes = $item->attributes();

      $items[] = [
        'name'     => (string) $item->name,
        'locality' => (string) $item->city,
        'address'  => implode(' ', [
          (string) $item->street->name,
          (string) $item->street->type,
          (string) $item->street->houseNumber,
        ]),
        'zipcode'  => (string) $attributes['zipCode'],
      ];
    }
  }

  return $items;
}

/**
 * @param $url
 *
 * @return array
 * @throws \GuzzleHttp\Exception\GuzzleException
 * @throws \PhpOffice\PhpSpreadsheet\Exception
 * @throws \PhpOffice\PhpSpreadsheet\Reader\Exception
 */
function _commerce_shipping_pickup_extra_xlsx_to_array($url) {
  $client = \Drupal::httpClient();
  $response = $client->request('GET', $url);
  $content = $response->getBody();

  $rows = [];

  if (!empty($content)) {
    $path = 'temporary://mpl.xlsx';

    $uri = \Drupal::service('file_system')
      ->saveData($content, $path, FileSystemInterface::EXISTS_REPLACE);

    if ($uri) {
      $uri = \Drupal::service('file_system')->realpath($uri);

      $reader = IOFactory::createReader('Xlsx');
      $spreadsheet = $reader->load($uri);

      $worksheet = $spreadsheet->getActiveSheet();
      $rows = $worksheet->toArray();
    }
  }

  return $rows;
}
